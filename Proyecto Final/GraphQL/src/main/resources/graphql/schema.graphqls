type Query {
    findAllElectronicDevice : [ElectronicDevices]
    findElectronicDeviceById(electronicDeviceId: Int) : ElectronicDevices
    findElectronicDeviceByTypeId(typedId: Int) : [ElectronicDevices]
    findAllManufacturers : [Manufacturer]
    findManufacturerById(manufacturerId: Int) : Manufacturer
    findAllComponents: [Component]
    findComponentById(componentId: Int) : Component
    findComponentsByManufacturerId(manufacturerId: Int) : [Component]
    findAllComponentDevices: [ComponentDevice]
    findComponentDevicesByComponentId(componentId: Int) : [ComponentDevice]
    findComponentDevicesByDeviceId(deviceId: Int) : [ComponentDevice]
    findComponentDeviceByComponentDeviceId(componentDeviceId: Int) : ComponentDevice
}

type Mutation {
    createElectronicDevice(inputDevice: ElectronicDevice) : ElectronicDevices
    updateElectronicDevice(inputDevice: ElectronicDeviceUpdate) : ElectronicDevices
    deleteElectronicDevice(electronicDeviceId: Int) : String
    createManufacturer(inputManufacturer: CreateManufacturer) : Manufacturer
    updateManufacturer(inputManufacturer: UpdateManufacturer) : Manufacturer
    deleteManufacturer(manufacturerId: Int) : String
    createComponent(inputComponent: CreateComponent) : Component
    updateComponent(inputComponent: UpdateComponent) : Component
    deleteComponent(componentId: Int) : String
    createComponentDevice(inputComponentDevice: CreateComponentDevice) : ComponentDevice
    updateComponentDevice(inputComponentDevice: UpdateComponentDevice) : ComponentDevice
    deleteComponentDevice(componentDeviceId: Int) : String
}

type ElectronicDevices {
    deviceId: ID,
    description: String,
    type: Type
}

input ElectronicDevice {
    description: String,
    typeId: Int!
}

input ElectronicDeviceUpdate {
    deviceId: ID!,
    description: String,
    typeId: Int
}

type Type {
    typeId: ID,
    description: String,
    characteristics: String
}

type Manufacturer {
    manufacturerId: ID,
    rif: String,
    fiscalDomain: String,
    components: Component
}

input CreateManufacturer {
    rif: String,
    fiscalDomain: String,
}

input UpdateManufacturer{
    manufacturerId: ID!,
    rif: String,
    fiscalDomain: String
}

type Component {
    componentId: ID,
    specs: String,
    manufacturerId: Int,
    manufacturers: Manufacturer,
    componentDevices: ComponentDevice,
    modifications: Modification
}

input CreateComponent {
    specs: String,
    manufacturerId: Int!,
}

input UpdateComponent {
    componentId: ID!,
    specs: String,
    manufacturerId: Int
}

type ComponentDevice {
    componentsDeviceId: ID,
    componentId: Int,
    deviceId: Int,
    quantity: Int,
    components: Component,
    electronicDevice: ElectronicDevices
}

input CreateComponentDevice {
    componentId: Int!,
    deviceId: Int!,
    quantity: Int
}

input UpdateComponentDevice {
    componentsDeviceId: ID,
    componentId: Int,
    deviceId: Int,
    quantity: Int
}

type Modification {
    id: ID,
    description: String,
    idComponent: Int,
    repairId: Repair,
    componentId: Component,
}

type Repair {
    id: ID,
    description: String,
    idClient: Client,
    idApparatus: Int,
    repairDate: String,
    modifications: Modification,
    electronicDevices: ElectronicDevices
}

type Client {
    id: ID,
    name: String,
    document: Int,
    address: String,
    phone: Int,
    email: String,
    repairs: Repair
}