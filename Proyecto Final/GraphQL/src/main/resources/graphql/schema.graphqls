type Query {
    findAllElectronicDevice : [ElectronicDevices]
    findElectronicDeviceById(electronicDeviceId: Int) : ElectronicDevices
    findElectronicDeviceByTypeId(typedId: Int) : [ElectronicDevices]
    findClientById(idClientC: Int) :Client
    findAllClient :[Client]
    findRepairById(idRepair: Int) :Repair
    findAllRepairs :[Repair]
    findModificationById(idModification : Int) :Modification
    findAllModifications : [Modification]
}

type Mutation {
    createElectronicDevice(inputDevice: ElectronicDevice) : ElectronicDevices
    updateElectronicDevice(inputDevice: ElectronicDeviceUpdate) : ElectronicDevices
    deleteElectronicDevice(electronicDeviceId: Int) : String
    createClient(inputClient : ClientCreate) : Client
    updateClient(updateClient : ClientUpdate) : Client
    deleteClient(deleteClient : Int):String
    createRepair(inputRepair : CreateRepair) : Repair
    updateRepair(updateRepair : UpdateRepair) : Repair
    deleteRepair(deleteClient : Int) : String
    createModification(inputModification : CreateModification) : Modification
    updateModification(updateModification : UpdateModification) : Modification
    deleteModification(deleteModification : Int) : String
}

type ElectronicDevices {
    deviceId: ID,
    description: String,
    type: Type
}

input ElectronicDevice {
    description: String,
    typeId: Int!
}

input ElectronicDeviceUpdate {
    deviceId: ID!,
    description: String,
    typeId: Int
}
input ClientCreate {
    name: String!,
    document: Int!,
    address: String,
    phone: Int,
    email: String
}
input ClientUpdate {
    id: ID!,
    name: String,
    document: Int,
    address: String,
    phone: Int,
    email: String
}
input CreateRepair {
    description: String,
    numberIdClient: Int!,
    idApparatus: Int!
}
input UpdateRepair {
    id: ID!,
    description: String,
    numberIdClient: Int,
    idApparatus: Int
}
input CreateModification {
    description: String,
    idRepair : Int!,
    idComponent: Int!
}
input UpdateModification {
    id:ID!,
    description: String,
    idRepair : Int,
    idComponent: Int
}
type Type {
    typeId: ID,
    description: String,
    characteristics: String
}
type Manufacturer {
    manufacturerId: ID,
    rif: String,
    fiscalDomain: String,
    components: Component
}

type Component {
    componentId: ID,
    specs: String,
    manufacturerId: Int,
    manufacturers: Manufacturer,
    componentDevices: ComponentDevice,
    modifications: Modification
}

type ComponentDevice {
    componentsDeviceId: ID,
    component: Int,
    deviceId: Int,
    quantity: Int,
    components: Component,
    electronicDevice: ElectronicDevices
}
type Modification {
    id: ID,
    description: String,
    idRepair : Int,
    idComponent: Int,
    repairId: Repair
}

type Repair {
    id: ID,
    description: String,
    idClient: Client,
    electronicDevices: ElectronicDevices,
    idApparatus: Int,
    numberIdClient: Int,
    repairDate: String
}

type Client {
    id: ID,
    name: String,
    document: Int,
    address: String,
    phone: Int,
    email: String
}